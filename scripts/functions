#!/usr/bin/env bash

SRC_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd || exit 1)
BASE_DIR=$(
    cd "$SRC_DIR" && cd ..
    pwd || exit 1
)

function usage() {
    local message
    if [ "$#" -gt 0 ]; then
        message="$1"
    fi

    cat <<EOF
usage: $0 <version>

$message
EOF
    [ "$#" -eq 0 ] && exit 0 || exit 1
}

function get_download_dir() {
    local result
    if [ "$#" -gt 0 ]; then
        result="$(get_output_dir)/download/$1/"
    else
        result="$(get_output_dir)/download/"
    fi
    echo "$result"
}

function get_release_dir() {
    [ "$#" -gt 0 ] || (
        echo "parameter version missing"
        exit 1
    )
    local result
    result="$(get_output_dir)/release/$1"
    echo "$result"
}

function get_output_dir() {
    echo "$BASE_DIR/out"
}

function get_manifest_yaml() {
    echo "$(get_release_dir "$1")/virt.yaml"
}

# $1: version to download
function download_virtctl_binaries() {
    local version
    version="$1"

    local download_dir
    download_dir="$(get_download_dir)"

    local marker_download_ok="$download_dir/fetch_${version}_ok"

    if [ ! -f "$marker_download_ok" ]; then

        local download_target_dir
        download_target_dir=$(get_download_dir "$version")
        mkdir -p "$download_target_dir"

        # fetch download urls directly from expanded assets page url, example:
        # https://github.com/kubevirt/kubevirt/releases/expanded_assets/v0.59.1
        local base_url="https://github.com/kubevirt/kubevirt"
        for download_path in $(curl --fail "$base_url/releases/expanded_assets/$version" |
            grep -oE "/releases\/.*\/virtctl-$version-(linux|windows|darwin)-(amd64|x86\_64|arm64)(\.exe)?"); do
            (
                cd "$download_target_dir" || (
                    echo "directory $download_target_dir does not exist!"
                    exit 1
                )
                target_file_name=$(echo $download_path | sed 's/-'"$(echo "$version" | sed 's/\./\\./g')"'//g' | sed 's/\/.*\///g')
                wget "$base_url$download_path" -O "$target_file_name"
            )
        done

        # leave mark that we have finished successfully
        touch "$marker_download_ok"
    fi

    echo "$(get_virtctl_binaries $version)"
}

function create_release_packages() {

    local tmp_dir current_dir
    tmp_dir=$(mktemp -d)
    current_dir=$(pwd)
    cd "$tmp_dir"
    wget https://raw.githubusercontent.com/kubevirt/kubevirt/master/LICENSE
    cd "$current_dir"
    [ -f "$tmp_dir/LICENSE" ] || (
        echo "failed to fetch license from original repository"
        exit 1
    )

    local version
    version="$1"

    local release_dir="$BASE_DIR/out/release/$version"

    for binary_file in $(get_virtctl_binaries "$1"); do
        [ -f "$binary_file" ] || (
            echo "binary file $binary_file does not exist!"
            exit 1
        )
        chmod +x "$binary_file"
        release_file_name="${binary_file/*\//}.tar.gz"
        if [ ! -f "$release_dir/$release_file_name" ]; then
            archive_dir="$release_dir/virtctl/"
            mkdir -p "$archive_dir"
            cp "$binary_file" "$archive_dir"
            cp "$tmp_dir/LICENSE" "$archive_dir"
            (
                cd "$release_dir" || (
                    echo "directory $release_dir does not exist!"
                    exit 1
                )
                tar zcvf "$release_file_name" virtctl/
                rm -rf "virtctl/"
            )
        fi
    done

    echo "$(get_release_packages "$version")"
}

function get_virtctl_binaries() {
    local version
    version="$1"

    echo "$(find "$(get_download_dir $version)" -name 'virtctl*')"
}

function get_release_packages() {
    local version
    version="$1"

    echo "$(find "$(get_release_dir "$version")" -name 'virtctl*.tar.gz' | sort)"
}

function create_github_release() {
    version="$1"

    release_response=$(
        curl --silent --fail -u "$(get_github_auth)" -X POST \
            "https://api.github.com/repos/kubevirt/kubectl-virt-plugin/releases" \
            -H 'Content-Type: text/json; charset=utf-8' \
            --data @- 2>&1 << EOF
{
  "tag_name": "${version}",
  "target_commitish": "main",
  "name": "${version} kubectl virt plugin",
  "body": "See https://github.com/kubevirt/kubevirt/releases/tag/${version}",
  "draft": false,
  "prerelease": false
}
EOF
)

    upload_url=$(echo "$release_response" | jq -r .upload_url)

    for file in $(get_release_packages "$version"); do
        platform_filename=$(basename "$file")
        target_upload_url=$(echo $upload_url | sed 's/{.*/?name='"$platform_filename"'\&label='"$platform_filename"'/')
        curl -v --fail -u "$(get_github_auth)" -X POST \
            -H 'Content-Type: application/gzip' \
            "$target_upload_url" \
            --data-binary "@$file"
    done
}

function get_github_auth() {
    echo "$GITHUB_USER:$(bash "$GIT_ASKPASS")"
}
